{"version":3,"sources":["container/App.js","serviceWorker.js","index.js"],"names":["App","useState","value","setValue","query","setQuery","news","setNews","useEffect","axios","get","then","data","hits","onChange","e","target","onKeyUp","keyCode","map","item","i","key","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAyIeA,EAnCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEYF,mBAAS,SAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGUJ,mBAAS,IAHnB,mBAGPK,EAHO,KAGDC,EAHC,KAKdC,qBAAU,WACNC,IAAMC,IAAI,8CAAgDN,GAAOO,MAAK,SAAAC,GAErEL,EAAQK,EAAKA,KAAKC,WAGlB,CAACT,IAYN,OACE,oCACE,2BAAOF,MAAOA,EAAOY,SAZJ,SAACC,GACpBZ,EAASY,EAAEC,OAAOd,QAW6Be,QAR7B,SAACF,GACD,KAAdA,EAAEG,SACJb,EAASU,EAAEC,OAAOd,UAQjBI,GAAOA,EAAKa,KAAI,SAACC,EAAKC,GACvB,OAAQ,wBAAIC,IAAKD,GACb,4BAAKD,EAAKG,aCvHFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b2132eb.chunk.js","sourcesContent":["import React, { memo, useCallback, useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button'\r\nimport axios from 'axios';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n// import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\n// import { connect } from 'react-redux'\r\n// import { addTodo, getTodosData, deleteTodo, editTodo } from '../actions/index'\r\n\r\n\r\n\r\n//class App extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     //console.log(\"props------------------>\",props)\r\n    //     this.myRef = React.createRef();\r\n    //     this.state = {\r\n    //         todos: []\r\n    //     }\r\n    // }\r\n\r\n    // options = {\r\n    //     onRowClick: (e, column, row) => {\r\n    //         if (column === 2) {\r\n    //             this.props.deleteTodo(e.id)\r\n    //             // axios.delete('http://localhost:8000/todoList/' + e.id + '/').then(res => {\r\n    //             //     this.getTodosData()\r\n    //             // });\r\n    //         }\r\n    //     },\r\n    // }\r\n\r\n    // cellEditProp = {\r\n    //     mode: 'click',\r\n    //     blurToSave: true,\r\n    //     afterSaveCell: (row, cellName, cellValue) => {\r\n    //         this.props.editTodo(row)\r\n    //         // axios.put('http://localhost:8000/todoList/' + row.id + '/', row).then(res => {\r\n    //         // })\r\n\r\n    //     }\r\n    // };\r\n\r\n    //getTodosData = () => {\r\n    // axios.get('http://localhost:8000/todoList').then(res => {\r\n    //     this.setState({ todos: res.data })\r\n    // })\r\n    //}\r\n\r\n    // componentDidMount() {\r\n    //     //this.getTodosData()\r\n    //     this.props.getTodosData();\r\n    // }\r\n\r\n    // componentDidUpdate(prevProps, previousState) {\r\n    //     if (prevProps.data !== this.props.data) {\r\n    //         this.setState({ todos: this.props.data })\r\n    //         //console.log(\"this.props\",this.props, \"prevProps\",prevProps)\r\n    //     }\r\n    // }\r\n\r\n    // addTodos = () => {\r\n    //     let todoAdded = this.myRef.current.value;\r\n    //     this.props.addTodo(todoAdded)\r\n    //     //this.getTodosData()\r\n    //     // axios.post('http://localhost:8000/todoList', { \"todo\": todoAdded }).then(res => {\r\n    //     //     this.getTodosData()\r\n    //     // })\r\n    // }\r\n\r\n    // renderTodos = () => {\r\n    //     const deleteFontIconComponent = () => <span> <FontAwesomeIcon icon={faTrash} /></span>\r\n    //     return (\r\n    //         <BootstrapTable data={this.props.data}\r\n    //             cellEdit={this.cellEditProp}\r\n    //             options={this.options}\r\n    //         >\r\n    //             <TableHeaderColumn dataField='id' isKey editable={false}>Product ID </TableHeaderColumn>\r\n    //             <TableHeaderColumn dataField='todo'>Todos</TableHeaderColumn>\r\n    //             <TableHeaderColumn dataFormat={deleteFontIconComponent} editable={false}>Delete</TableHeaderColumn>\r\n    //         </BootstrapTable>\r\n    //     )\r\n    // }\r\n\r\n    // render() {\r\n    //     //console.log(\"this.props.data\",this.props.data)\r\n    //     return (\r\n    //         <div id=\"mainApp\" className=\"App\">\r\n    //             <input ref={this.myRef} type=\"text\" id=\"todo\" name=\"todo\" />\r\n    //             <Button onClick={this.addTodos} variant=\"danger\">Add Todo</Button>\r\n    //             <br />\r\n\r\n    //             {this.props.data && this.props.data.length > 0 ?\r\n    //                 this.renderTodos() :\r\n    //                 <h3>No Todos Available</h3>\r\n    //             }\r\n    //         </div>\r\n    //     );\r\n    // }\r\n//}\r\n\r\nconst App = () => {\r\n    const [value, setValue] = useState('')\r\n    const [query, setQuery] = useState('Rohit');\r\n    const [news, setNews] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('https://hn.algolia.com/api/v1/search?query=' + query).then(data => {\r\n         //console.log(\"data\",data.data.hits)\r\n         setNews(data.data.hits)\r\n        //this.setState({ todos: res.data })\r\n    })\r\n      }, [query]);\r\n  \r\n    const handleChange = (e) => {\r\n      setValue(e.target.value)\r\n    }\r\n  \r\n    const handleEnter = (e) => {\r\n      if (e.keyCode === 13) {\r\n        setQuery(e.target.value)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <input value={value} onChange={handleChange} onKeyUp={handleEnter} />\r\n        {/* <Component fetchData={fetchData} /> */}\r\n        {news&& news.map((item,i)=> {\r\n        return (<ul key={i}>\r\n            <li>{item.title}</li>\r\n        </ul>)\r\n        })}\r\n      </>\r\n    )\r\n  }\r\nexport default App;\r\n// const mapStateToProps = (state, ownProps) => (\r\n//     {\r\n//         data: state.data\r\n//     })\r\n\r\n// export default connect(mapStateToProps, { getTodosData, addTodo, deleteTodo, editTodo })(App)\r\n\r\n\r\n\r\n// const Component = memo(({ fetchData }) => {\r\n//   const [data, setData] = useState([])\r\n\r\n//   useEffect(() => {\r\n//     const getData = async () => {\r\n//       const res = await fetchData()\r\n//       setData(res.data.hits)\r\n//     }\r\n//     getData()\r\n//   }, [fetchData]);\r\n\r\n//   const getDate = (date) => {\r\n//     return moment(date).format('DD MMMM YYYY')\r\n//   }\r\n\r\n//   return (\r\n//     <ul>{data.map((item) => <li>[{getDate(item.created_at)}]<a href={item.url}>{item.title}</a></li>)}</ul>\r\n//   )\r\n// })\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './configureStore'\n\nReactDOM.render(\n // <Provider store={store}>\n  <App />,\n//</Provider>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}